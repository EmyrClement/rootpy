#!/usr/bin/env python

from argparse import ArgumentParser

parser = ArgumentParser()
parser.add_argument('-l', action='store_true', dest='nointro', default=False)
parser.add_argument('file')
args = parser.parse_args()

import readline
import cmd
from rootpy.io import open as ropen
from rootpy.io.file import _DirectoryBase, DoesNotExist
import subprocess
import os
import sys
import re
from rootpy.tree import Tree

EXEC_CMD = re.compile('(?P<name>\w+)\.(?P<call>\S+)')


def ioctl_GWINSZ(fd):
    
    try:
        import fcntl, termios, struct, os
        cr = struct.unpack('hh', fcntl.ioctl(fd, termios.TIOCGWINSZ, '1234'))
    except:
        return None
    return cr


def get_terminal_size():

    cr = ioctl_GWINSZ(0) or ioctl_GWINSZ(1) or ioctl_GWINSZ(2)
    if not cr:
        try:
            fd = os.open(os.ctermid(), os.O_RDONLY)
            cr = ioctl_GWINSZ(fd)
            os.close(fd)
        except:
            pass
    if not cr:
        try:
            cr = (env['LINES'], env['COLUMNS'])
        except:
            cr = (25, 80)
    return int(cr[1]), int(cr[0])


class shell_cmd(cmd.Cmd, object):

    def do_shell(self, s):

        subprocess.call(s, shell=True)

    def help_shell(self):

        print "execute shell commands"


class empty_cmd(cmd.Cmd, object):
    
    def emptyline(self):

        pass


class exit_cmd(cmd.Cmd, object):

    def can_exit(self):

        return True

    def onecmd(self, line):

        r = super(exit_cmd, self).onecmd(line)
        if r and (self.can_exit() or
           raw_input('exit anyway ? (yes/no):')=='yes'):
             return True
        return False

    def do_exit(self, s):

        return True

    def help_exit(self):

        print "Exit the interpreter."
        print "You can also use the Ctrl-D shortcut."

    def do_EOF(self, s):

        print
        return True
    
    help_EOF= help_exit


class roosh(exit_cmd, shell_cmd, empty_cmd):

    def __init__(self, filename):
        
        super(roosh, self).__init__()
        self.file = ropen(filename)
        self.pwd = self.file
        self.prompt = '%s > ' % self.pwd._path
        self.namespace = {}
        self.__update_namespace()
    
    def __update_namespace(self):

        for key in self.pwd.GetListOfKeys():
            name = key.GetName()
            if not key.GetClassName().startswith('TDirectory'):
                self.namespace[name] = self.pwd.Get(name)

    def do_env(self, s):

        for name, value in self.namespace.items():
            if name == '__builtins__':
                continue
            print name, value
    
    def do_cd(self, path):

        if path == '.':
            return
        try:
            self.pwd = self.pwd.GetDirectory(path)
            self.pwd.cd()
            self.prompt = '%s > ' % self.pwd._path
            self.__update_namespace()
        except DoesNotExist, e:
            print e

    def do_ls(self, s):

        for key in self.pwd.GetListOfKeys():
            print key.GetName()
    
    def default(self, line):
        
        try:
            exec line in self.namespace
            return
        except Exception, e:
            print e
            return
        return super(roosh, self).default(line)


try:
    terminal = roosh(args.file)
    if args.nointro:
        terminal.cmdloop()
    else:
        terminal.cmdloop("Welcome to the ROOSH terminal")
except Exception, e:
    sys.exit(e)
