#!/usr/bin/env python

from multiprocessing.managers import BaseManager
from multiprocessing import Process, Queue
import time

class WorkerQueueManager(BaseManager): pass
WorkerQueueManager.register('get_queue')

class Server(Process):

    def __init__(self, connect_queue, incoming_queue, request_queue):

        self.connect_queue = connect_queue
        self.incoming_queue = incoming_queue
        self.request_queue = request_queue
        self.outgoing_queues = {}
        super(Server, self).__init__()

    def run(self):

        while True:
            while not self.connect_queue.empty():
                host = self.connect_queue.get()
                print "received connection request from host %s"% host
                m = WorkerQueueManager(address=(host, 50000), authkey='abracadabra')
                m.connect()
                self.outgoing_queues[host] = m.get_queue()
            while not self.incoming_queue.empty():
                job = self.incoming_queue.get()
                requesting_host = self.request_queue.get()
                if not self.outgoing_queues.has_key(requesting_host):
                    break
                self.outgoing_queues[requesting_host].put(job)
            time.sleep(1)

connect_queue = Queue()
incoming_queue = Queue()
request_queue = Queue()

server = Server(connect_queue, incoming_queue, request_queue)
server.start()

class ServerQueueManager(BaseManager): pass
ServerQueueManager.register('get_connect_queue', callable=lambda:connect_queue)
ServerQueueManager.register('get_request_queue', callable=lambda:request_queue)
ServerQueueManager.register('get_queue', callable=lambda:incoming_queue)

m = ServerQueueManager(address=('', 50000), authkey='abracadabra')
s = m.get_server()
s.serve_forever()
