#!/usr/bin/env python

import argparse
import rootpy
import ROOT
import fnmatch
import os, sys


class formatter_class(argparse.ArgumentDefaultsHelpFormatter,
                      argparse.RawTextHelpFormatter):
    pass


parser = argparse.ArgumentParser(
        formatter_class=formatter_class)
parser.add_argument('-v', '--verbose', action='store_true', default=False)
parser.add_argument('--version', action='version', version=rootpy.__version__,
                    help="show the version number and exit")
parser.add_argument('-p', '--pattern', default='*.root*', 
        help="files must match this pattern when searching in directories")

subparsers = parser.add_subparsers()


def entries(chain, args):

    chain = make_chain(args)
    if args.selection is None:
        print "%i total entries" % chain.GetEntries()
    else:
        from rootpy.tree import Cut
        selection = str(Cut(args.selection))
        print "%i entries after selection %s" % (
                chain.GetEntries(selection), selection)


parser_entries = subparsers.add_parser('entries')
parser_entries.add_argument('-t', '--tree', required=True,
        help="name of tree (including path) in each file")
parser_entries.add_argument('-s', '--selection', default=None, 
        help="only entries satisfying this cut will be included in total")
parser_entries.add_argument('files', nargs='+')
parser_entries.set_defaults(op=entries)


def draw(chain, args):
    
    chain = make_chain(args)
    if args.selection is None:
        chain.Draw(args.expression, '', args.draw)
    else:
        from rootpy.tree import Cut
        selection = str(Cut(args.selection))
        chain.Draw(args.expression, selection, args.draw)


parser_draw = subparsers.add_parser('draw')
parser_draw.add_argument('-t', '--tree', required=True,
        help="name of tree (including path) in each file")
parser_draw.add_argument('-e', '--expression', required=True,
        help="expression to be drawn")
parser_draw.add_argument('-s', '--selection', default=None, 
        help="only entries satisfying this cut will be drawn")
parser_draw.add_argument('-d', '--draw', default='', 
        help="draw options")
parser_draw.add_argument('--staged', action='store_true', default=False, 
        help="update the canvas after each file is drawn")
parser_draw.add_argument('files', nargs='+')
parser_draw.set_defaults(op=draw)


def merge(args):
    
    chain = make_chain(args)
    if os.path.exists(args.output):
        sys.exit("Output destination already exists.")
    print "Output: %s" % args.output
    print "Merging ..."
    chain.Merge(args.output)


parser_merge = subparsers.add_parser('merge')
parser_merge.add_argument('-t', '--tree', required=True,
        help="name of tree (including path) in each file")
parser_merge.add_argument('-o', '--output', required=True,
        help="output file name")
parser_merge.add_argument('files', nargs='+')
parser_merge.set_defaults(op=merge)

args = parser.parse_args()


def find_files(dirs, pattern=None):

    for arg in dirs:
        if os.path.isfile(arg):
            yield arg
            continue
        elif os.path.isdir(arg):
            for root, dirnames, filenames in os.walk(arg):
                if pattern is not None:
                    for filename in fnmatch.filter(filenames, pattern):
                        yield os.path.join(root, filename)
                else:
                    for filename in filenames:
                        yield filename


def make_chain(args):
    
    if hasattr(args, 'staged') and args.staged:
        from rootpy.tree import TreeChain
        files = list(find_files(args.files, args.pattern))
        chain = TreeChain(
                args.tree,
                files,
                verbose=args.verbose)
        nfiles = len(files)
    else:
        nfiles = 0
        chain = ROOT.TChain(args.tree, '')
        for filename in find_files(args.files, args.pattern):
            nfiles += 1
            if args.verbose:
                print filename
            chain.Add(filename)
    print "%i files" % nfiles
    return chain

args.op(args)
